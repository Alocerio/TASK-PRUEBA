{"version":3,"sources":["components/TodoItem.jsx","components/TodoList.jsx","App.js","reportWebVitals.js","index.js"],"names":["TodoItem","todo","toggleTodo","id","task","completed","p","type","colorScheme","checked","onChange","TodoList","todos","color","map","KEY","App","useState","setTodos","todoTaskRef","useRef","useEffect","storeTodos","JSON","parse","localStorage","getItem","setItem","stringify","textShadow","align","fontSize","bg","mt","h","justify","templateRows","templateColumns","gap","w","rowSpan","colSpan","newTodos","find","size","variant","mb","ref","placeholder","mr","onClick","current","value","prevTodos","uuidv4","className","filter","as","m","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b79bdb6b.chunk.js","sourcesContent":["import React from 'react';\nimport { Box , HStack,ListItem,Checkbox} from \"@chakra-ui/react\";\nconst TodoItem = ({todo, toggleTodo}) => {\n    const {id, task, completed } = todo;\n\n    const handleTodoClick = () => {\n    toggleTodo(id);\n}\n\n    return (\n        <HStack >\n            <Box >\n            <ListItem>\n            <Checkbox p={2} type=\"checkbox\"\n            colorScheme=\"teal\"\n             checked={completed} onChange={handleTodoClick} />\n           {task}\n              </ListItem>\n            </Box>\n            \n        </HStack>\n        \n    );\n}\n\nexport default TodoItem;\n","import React from 'react';\nimport TodoItem from './TodoItem';\nimport { Box , HStack, List,Center,UnorderedList,} from \"@chakra-ui/react\";\nconst TodoList = ({ todos, toggleTodo }) => { \n    return (\n       \n        <Center  p={4} color=\"dark\">\n        <List >\n            {todos.map((todo)=> (\n                <TodoItem  key={todo.id} todo={todo} toggleTodo={toggleTodo} />\n            ))}\n        </List>\n        </Center>\n       \n    );\n}\n\nexport default TodoList;\n","import React, {useState, Fragment, useRef, useEffect} from 'react';\n\nimport { v4 as uuidv4} from 'uuid'\nimport TodoList from './components/TodoList.jsx';\n\nimport {\n  ChakraProvider, Center, Box, Spacer, Flex,\n  Text, Button,Heading, useColorMode, Input,\n  SimpleGrid,Grid, GridItem,Textarea,Square\n\n} from \"@chakra-ui/react\"\n\nconst KEY = \"todoApp.todos\";\n\nconst App = () => {\n\n  const [todos, setTodos] = useState([\n    {id: 1 ,task: 'tarea 1', completed: false}\n  ]);\n\n  const todoTaskRef = useRef();\n\n  useEffect(() => {\n    const storeTodos = JSON.parse(localStorage.getItem(KEY));\n    if(storeTodos){ \n      setTodos(storeTodos);} \n    }, []);\n  \n  useEffect(() => {\n    localStorage.setItem(KEY , JSON.stringify(todos));\n  } , [todos]);\n\n  const toggleTodo =(id)=>{\n    const newTodos = [...todos];\n    const todo = newTodos.find((todo)=> todo.id === id);\n    todo.completed = !todo.completed;\n    setTodos(newTodos);\n  }\n\n  const handleTodoAdd = ()=>{\n    const task = todoTaskRef.current.value;\n    if (task === '') return;\n\n    setTodos((prevTodos)=>{\n      return [...prevTodos, { id: uuidv4(), task, completed: false}]\n    })\n\n    todoTaskRef.current.value = null;\n  }\n\n\n  const handleDeleteTodo = ()=>{\n    const newTodos = todos.filter((todo)=> !todo.completed);\n    setTodos(newTodos);\n  }\n\n\n  return (\n    <ChakraProvider >\n    \n     <Heading\n     textShadow=\"1.5px 1.2px #9796ef\"\n      p='50px' align='center' color=\"#319795\" fontSize=\"5xl\">\n       <Square  bg=\"#edf2f7\" \n       >\n       SIMPLE TASK\n       </Square>\n       </Heading>\n      <Center>\n       <Grid  \n       mt='20px'\n       h=\"400px\"\n       align=\"center\"\n       justify=\"center\"\n       templateRows=\"repeat(1, 1fr)\"\n       templateColumns=\"repeat(2, 1fr)\"\n       gap={4}>   \n      \n       <GridItem  bg=\"#edf2f7\"  w='40vw' rowSpan={1} colSpan={1}> \n          <Center>    \n          <TodoList todos={todos} toggleTodo={toggleTodo}/> \n          </Center>\n           </GridItem> \n\n          \n          <GridItem  colSpan={1} w='40vw' >\n            \n          <Textarea \n           size=\"sm\"\n           variant=\"filled\"\n           mb={4}\n           ref={todoTaskRef} type='text' placeholder='Nueva Tarea'/>\n       \n          <Button colorScheme=\"teal\" mr=\"10px\" onClick={handleTodoAdd}>+</Button>\n          \n          <Button className='bg-dark' onClick={handleDeleteTodo} >-</Button>\n          \n          <Spacer mb='4'/>\n          <Text as=\"i\" m=\"1\">Te quedan {todos.filter((todo)=> !todo.completed).length} tareas por terminar!</Text>\n          \n          </GridItem>\n        \n         </Grid> \n         </Center>  \n\n    </ChakraProvider>\n  \n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}